%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <map>
#include "vektor.hpp"

using namespace std;

void yyerror(string s) {
    cerr << s << endl;
    exit(EXIT_FAILURE);
}

int yylex();

map<char, Vektor> tablica;
%}

%union {
    char c;
    Vektor *v;
    double d;
}

%type <v> NizBrojeva Vektor

%token <c> id_token
%token <d> num_token
%token dodela_token print_token ugao_token eqv_token

%left '+' '-'
%left '*'

%%
Program: Program Naredba ';' '\n'
| Naredba ';' '\n'
;

Naredba: id_token dodela_token Vektor {
    tablica[$1] = *$3;
    delete $3;
}
| print_token '(' Vektor ')' {
    $3->ispisi();
}
| Vektor '.' Vektor {
    $1->skalarni(*$3);
}
| '|' Vektor '|' {
    $2->norma();
}
| ugao_token '(' Vektor ',' Vektor ')' {
    $3->ugao(*$5);
}
| eqv_token '(' Vektor ',' Vektor ')' {
    $3->ekv(*$5);
}
;

Vektor: '<' NizBrojeva '>' {
    $$ = $2;
}
| id_token {
    if (tablica.find($1) == tablica.end()) {
        cout << "Promenljiva '" << $1 << "' nije definisana" << endl;
        $$ = new Vektor();
    }
    else {
        $$ = new Vektor(tablica[$1]);
    }
}
| Vektor '+' Vektor {
    $$ = new Vektor($1->saberi(*$3));
    delete $1;
    delete $3;
}
| Vektor '-' Vektor {
    $$ = new Vektor($1->oduzmi(*$3));
    delete $1;
    delete $3;
}
| num_token '*' Vektor {
    $$ = new Vektor($3->pomnozi($1));
    delete $3;
}
;

NizBrojeva: NizBrojeva ',' num_token {
    $1->dodajElement($3);
    $$ = $1;
}
| num_token {
    $$ = new Vektor();
    $$->dodajElement($1);
}
;

%%
int main() {
    yyparse();
    return 0;
}
